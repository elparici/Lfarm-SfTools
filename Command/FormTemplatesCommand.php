<?php

/*
 * This file is made to generate twig templates compiling them in one single form.html.twig file.
 *
 * (c) elparici <lucdedampierre@l-farm.com>
 *
 * PRE REQUISITIES !!!!
 * This script needs Fontawesome + a Commons Dir -> app/Commons containg these 3 templates:
 * - collectionForm.html.twig
 * - dataPrototypeCollection.html.twig
 * - Breadcrumb.html.twig
 *
 * @todo -> Add AutoCompletion
 * @todo -> Update form name in controller editAction
 * @todo -> Inject Collections into Controller (originalCollection + update relationnal remove + orphanRemovals)
 */

namespace Lfarm\DevCollabBundle\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;

use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\ConfirmationQuestion;

use Sensio\Bundle\GeneratorBundle\Command\Validators;
use Sensio\Bundle\GeneratorBundle\Command\Helper\QuestionHelper;

use Doctrine\Bundle\DoctrineBundle\Mapping\DisconnectedMetadataFactory;




class FormTemplatesCommand extends Command
{

    protected function configure()
    {
       $this
        ->setName('lfarm:gen:crudish')
        ->setDescription('Creates optimized bootstrap CRUD templates for the given entity')
        ->setHelp("This command allows you to create optimized bootstrap CRUD templates for the given entity...")
        ->setDefinition(array(
            new InputArgument('entity', InputArgument::OPTIONAL, 'The entity class name to initialize (shortcut notation)'),
            new InputOption('entity', '', InputOption::VALUE_REQUIRED, 'The entity class name to initialize (shortcut notation)'),
            new InputOption('route-prefix', '', InputOption::VALUE_REQUIRED, 'The route prefix'),
        ));
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        $output->writeln([
            '',
            $this->getHelper('formatter')->formatBlock('Form templates entity Creator', 'bg=blue;fg=white', true),
            '',
            '============',
            '',
            'Optimize files generated by the native SF Crud generator',
            '',
            '',
        ]);

        $helper = $this->getHelper('question');
        $container = $this->getApplication()->getKernel()->getContainer();
        $twigFS = $container->get('lfarmDevCollab.twigFunctions');
        $entity = Validators::validateEntityName($input->getArgument('entity'));
        list($bundle, $entity) = $this->parseShortcutNotation($entity);
        $bundle = $container->get('kernel')->getBundle($bundle);
        $manager = new DisconnectedMetadataFactory($container->get('doctrine'));
        $prefix = strtolower($bundle->getName()) . '_' . $this->getRoutePrefix($input, $entity);
        $entityDir = $bundle->getPath() . '/' . $entity;
        $entityTemplatesDir = $bundle->getPath() . '/Resources/views/' . $entity ;

        try {

             $metadata = $manager->getBundleMetadata($bundle);
             $className = $bundle->getNamespace() . "\Entity\\" . $entity;
             $metadata = $manager->getClassMetadata($className);
             $controller = $bundle->getPath(). '/Controller'.'/'. $entity . 'Controller.php';

            } catch (\Exception $e) {
                throw new \RuntimeException(sprintf('Entity "%s" does not exist in the "%s" bundle. Create it with the "doctrine:generate:entity" command and then execute this command again.', $entity, $bundle));
            }


        $entityProperties = $metadata->getMetadata();
        $entityFieldNames = $entityProperties[0]->fieldNames;
        $Mappings = $entityProperties[0]->associationMappings;
        
        $output->writeln(sprintf('Entity: "<info>%s</info>"', $bundle->getNamespace() . '/' . $entity));
        $output->writeln(sprintf('Controller: "<info>%s</info>"', $controller));
        $output->writeln(sprintf('Default Prefix: "<info>%s</info>"', $prefix));

        foreach ($entityFieldNames as $fieldName) {
                $output->writeln(sprintf('  > Var: <comment>%s</comment>', $fieldName));
        }

        $question = new Question('Please specify your root prefix (ex:"admin" will give admin_entity_new, admin_entity_edit, ):   ', $prefix);
        $validatedPrefix = $helper->ask($input, $output, $question);

        if (count($Mappings) > 0) {
            $question = new Question('We just detected your entity has Array Collection structure mapping(s), would you like to include JS Collection management in your form? (y,n):   ', 'n');
            $CollectionJsGen = $helper->ask($input, $output, $question);
            $output->writeln("got a collection shit");
        }
        else{
            $CollectionJsGen = 'n';
            $output->writeln("no collection found");
        }

        $question = new Question('New, edit, form twig templates will be generated. Do you confirm generation? (y,n):   ', 'n');
        $TemplatesGen = $helper->ask($input, $output, $question);

        if ($TemplatesGen == 'y') {
            $data = array();
            $data[] = $twigFS->startBlock();
            $data[] = $twigFS->getBreadCrumb($entity);
            $data[] = $twigFS->startForm();

            foreach ($entityFieldNames as $fieldName) {
                $data[] = $twigFS->getForm($fieldName);
            }
            if (count($Mappings) > 0) {
                foreach ($Mappings as $mapping) {
                    if ($CollectionJsGen == 'y') {
                        $targetEntityRev = str_split (strrev($mapping['targetEntity']));
                        $targetEntityTemp ="";
                        foreach ($targetEntityRev as $letter) {
                            if ($letter != "\\") {
                              $targetEntityTemp = $targetEntityTemp.$letter;
                            }
                            else{
                                break;
                            }
                        }
                        $targetEntity = strrev($targetEntityTemp);
                        $output->writeln(sprintf('Target Entity:  "<info>%s</info>"', $targetEntity));
                        $data[] = $twigFS->getCollectionForm($bundle->getName(), $mapping['fieldName'], $targetEntity);
                        $output->writeln(sprintf('"<info>%s</info>" --> Var Prototype Line Form ', 'form.'.$mapping['fieldName']));
                    }
                else{
                        $data[] = $this->getForm($mapping['fieldName']);
                        $output->writeln(sprintf('"<info>%s</info>" --> classical Line Form ', 'form.'.$mapping['fieldName']));
                    }
                }
                 
            }

            $data[] = $twigFS->createMenu($validatedPrefix, strtolower($entity));
            $data[] = $twigFS->endBlock();
            if ($CollectionJsGen == 'y') {
                $data[] = $twigFS->startJsBlock();
                $data[] = $twigFS->getJsBasicCollectionValues();
                foreach ($Mappings as $mapping) {
                    $data[] = $twigFS->getJsCollectionHolder($mapping['fieldName']);
                }
                $data[] = $twigFS->endBlock();
            }
            file_put_contents ( $entityTemplatesDir . '/form_test.html.twig' , $data);
            $output->writeln('Generated:  ' . $entityTemplatesDir . '/form.html.twig form template: <info>OK</info>');

            $data = array();
            $data[] = $twigFS->basicExtends($bundle->getName());
            $data[] = $twigFS->basicUse($bundle->getName(), $entity);
            
            file_put_contents ( $entityTemplatesDir . '/edit_test.html.twig' , $data);
            $output->writeln('Generated:  ' . $entityTemplatesDir . '/edit.html.twig form template: <info>OK</info>');
            
            file_put_contents ( $entityTemplatesDir . '/new_test.html.twig' , $data);
            $output->writeln('Generated:  ' . $entityTemplatesDir . '/new.html.twig form template: <info>OK</info>');
        }
        

        $question = new Question('Would you like to generate a Bootstraped Index template for your entity? (y,n):   ', 'n');

        $indexGen = $helper->ask($input, $output, $question);
        if ($indexGen == 'y') {

            $options = array();
            foreach (range(1, 12) as $n) {$options[]=$n;}

            $question = new ChoiceQuestion(
                'n\ Please provide a Bootstrap col-grid Value (integer from 1 to 12):   ',
                $options,
                12
            );
            $question->setErrorMessage('Given data %s is invalid. The value must be an integer between 1 and 12. For more info, check: http://v4-alpha.getbootstrap.com/layout/grid/');
            $colValue = $helper->ask($input, $output, $question);
            
            file_put_contents ( $entityTemplatesDir . '/index_test.html.twig' , $twigFS->generateIndex($entity, $bundle, $entityFieldNames, $colValue, $validatedPrefix));
            $output->writeln('Generated:  ' . $entityTemplatesDir . '/index.html.twig bootstrap template: <info>OK</info>');
        }
        if ($indexGen != 'y' && $TemplatesGen != 'y') {
           $message = 'No files have been written';
           $info = 'You answered NO to all the questions! :-( ';
           $bg = 'red';
           $fg = 'white';
        }
        else{
            $message = 'All Twig Templates have been generated!';
            $info = 'Now Get to work! ;-)';
            $bg = 'green';
            $fg = 'black';
        }
        $output->writeln([
            '',
            '',
            $this->getHelper('formatter')->formatBlock($message, 'bg='.$bg.';fg='.$fg.'', true),
            '',
            sprintf('<info>%s</info>', $info),
            '',
        ]);
    }

    
   
    protected function getRoutePrefix(InputInterface $input, $entity)
    {
        $prefix = $input->getOption('route-prefix') ?: strtolower(str_replace(array('\\', '/'), '_', $entity));

        if ($prefix && '/' === $prefix[0]) {
            $prefix = substr($prefix, 1);
        }

        return $prefix;
    }

    public function parseShortcutNotation($shortcut)
    {
        $entity = str_replace('/', '\\', $shortcut);

        if (false === $pos = strpos($entity, ':')) {
            throw new \InvalidArgumentException(sprintf('The controller name must contain a : ("%s" given, expecting something like AcmeBlogBundle:Post)', $entity));
        }

        return array(substr($entity, 0, $pos), substr($entity, $pos + 1));
    }


}

